GDB Backtrace at time of the crash:

#0  0x0000000000446b1a in next_code (self=self@entry=0xe310d0)
    at libarchive/archive_read_support_filter_compress.c:386
#1  0x0000000000446698 in compress_filter_read (self=0xe310d0, 
    pblock=0xe31158) at libarchive/archive_read_support_filter_compress.c:287
#2  0x000000000043d504 in __archive_read_filter_ahead (filter=0xe310d0, 
    min=<optimized out>, avail=<optimized out>)
    at libarchive/archive_read.c:1275
#3  0x0000000000445fb4 in bzip2_reader_bid (self=self@entry=0xe14c28, 
    filter=0x5315f0) at libarchive/archive_read_support_filter_bzip2.c:134
#4  0x000000000043af98 in choose_filters (a=0xe14b20)
    at libarchive/archive_read.c:562
#5  archive_read_open1 (_a=_a@entry=0xe14b20)
    at libarchive/archive_read.c:506
#6  0x0000000000444d19 in archive_read_open_filenames (a=<optimized out>, 
    a@entry=0xe14b20, filenames=<optimized out>, 
    filenames@entry=0x7fffffffe090, block_size=<optimized out>, 
    block_size@entry=10240) at libarchive/archive_read_open_filename.c:150
#7  0x0000000000444b47 in archive_read_open_filename (a=0x5315f0, 
    a@entry=0xe14b20, 
    filename=0x7fffffffe755 "results/crashes/id:000000,sig:11,src:000061,time:830883,op:havoc,rep:2", block_size=15278080)
    at libarchive/archive_read_open_filename.c:107
#8  0x000000000042a734 in read_archive (bsdtar=bsdtar@entry=0x7fffffffe1f0, 
    mode=mode@entry=120 'x', writer=writer@entry=0xe13620) at tar/read.c:204
#9  0x000000000042b2c7 in tar_mode_x (bsdtar=bsdtar@entry=0x7fffffffe1f0)
    at tar/read.c:104
#10 0x00000000004289f7 in main (argc=<optimized out>, argv=<optimized out>)
    at tar/bsdtar.c:804

Investigation of crash

The crash occurs in the while-loop on line 385 because code is updated using
state->prefix[code], which normally causes an exit from the while loop as code
becomes smaller than 256; however, if state->prefix[code] is 256, as it is with
the fuzzer's input, it never exist the while-loop. State's stackp, meanwhile,
is incremented until it tries to access memory that is out of bounds, causing 
the bug. A potential fix to this vulnerability would be to run the while
loop once less, i.e. change it from "while (code >= 256)" to 
"while (code > 256)", so that there's no infinite loop or segfault.

