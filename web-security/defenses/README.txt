# Description of defenses

## Alpha: Cookie Theft
The defense against Alpha is to only permit alphanumeric
usernames. That way, none of the characters that JS relies on
(<, ., ', ? etc.) can be included in the username. 

When the user tries to view a profile with an invalid username,
the user is notified that the username is invalid, and redirected
to view its own profile (by default). 

The project instructions instructed us not to oversanitize profile 
inputs, but being restrictive with usernames was said to be fine in OH. 


## Bravo: Cross-Site Request Forgery
The Bravo defense involves generating a CSRF token, signing it, and embedding
it in a hidden input field in the transfer form. In the post_transfer endpoint,
we then check the signature to prevent a malicious website 
from abusing a logged-in user's session to transfer bitbars from the victim's
account. We sign the CSRF token to ensure integrity: the token itself
is a cookie so modifiable by the attacker. To generate the token, 
we use the current time as a salt to ensure that every token will be different.

We made the design choice to re-generate the CSRF token at every
request coming into our server to make them as short-lived as possible.
While this increases the complexity and so computation on our server,
we thought it worth it to increase security, especially given the
otherwise light server-side computations performed for our app.


## Charlie: Session Hijacking with Cookies
Upon login, we set two cookies:
    - the signed hash of the account's username, bitbars, and hashed password
    - the timestamp of when the cookie was set

At the start of every endpoint, we then invoke a function (checkValidCookie()),
which checks if the username, bitbars, and password that the current user serves
have not been tinkered with. If any one of them has been tinkered with,
it logs the user out.

This requires that the cookie hash be recomputed and resigned every
time it is changed and the user logs in so that it stays up to date. 
The only place where this turns out to be necessary is after a new
user registers.

This defense is stateless, meaning it doesn't require the server to maintain any
state. This makes it easily scaleable.


## Delta: Cooking the Books with Cookies
The Delta exploit is very similar to Charlie, as it also modifies the
session object (cookie) and sends it back to an unsuspecting server.
The difference is in how the two attacks change the session object: 
Charlie changes the username and the bitbar count, while Delta just
changes the bitbar count. 

The changes that Delta makes to the session object are, therefore, 
a direct subset of the changes that Charlie makes. Since the defense
for Charlie ensures the integrity of all the session object properties
that the Charlie exploit modifies, it also ensures the integrity of the
properties that Delta modifies. Specifically, Charlie ensures the
integrity of the bitbars associated with an account, so it also
works for Delta.


## Echo: SQL Injection
By parameterizing the SQL queries to our SQLite database,
we prevent the attacker from picking a username that 
allows him to manipulate our SQL query. We replicated this
defense across all of our SQL queries so that user input
can never be interpreted as code across the web app.



## Foxtrot: Profile Worm
We set a Content Security Policy (CSP), only allowing scripts that we
explicitly authorized to run. This authorization is done with a nonce,
which is generated each time a request to our website is made and 
subsequently communicated to the one script that we want to allow
(the animation script that counts up the number of bitbars).

The malicious profile script from exploit Foxtrot is not explicitly
allowed to run, so doesn't.


## Gamma: Password Extraction via Timing attacker
The defense for the Gamma attack consists of two parts:
1. remove the sleep() call when the password is correct
since it gives the attacker very explicit and recognizable
timing information when the correct password is entered.

2. add a sleep call() for a random duration no matter if the
password is correct or not. This serves to add noise and 
complicate attempts to use statistical methods to distinguish
the server response time given a correct password from the
server response time given an incorrect password


# Resources used for defenses

## Resources
- https://www.sqlite.org/docs.html
- https://developer.mozilla.org/en-US/
- https://expressjs.com/en/5x/api.html

- Office Hours
    - George's OH on Wednesday May 17
    - Abdu's OH on Wednesday May 17
    - Simon's OH on Thursday May 18