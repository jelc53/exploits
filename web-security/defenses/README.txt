# Description of (resources used for) defenses

HIGH-LEVEL TODO
- Bravo
- Charlie
- Delta (similar to Charlie)
- Echo (only have to apply elsewhere) <- unclear if we'll be graded on fixing the other ones (but TA recommends we fix others too)
- Foxtrot


TESTED & WORKS.
## Alpha: Cookie Theft
The defense against Alpha is to only permit alphanumeric
usernames. That way, none of the characters that JS relies on
(<, ., ', ? etc.) can be included in the username. 

When the user tries to view a profile with an invalid username,
the user is notified that the username is invalid, and redirected
to view its own profile (by default). 

The project instructions instructed us not to oversanitize profile 
inputs, but being restrictive with usernames was said to be fine in OH. 


TODO:
- when I include one line it doesn't compile
- test

## Bravo: Cross-Site Request Forgery

Embed CSRF token & its HMAC in hidden form field in the form in transfer/form.ejs

Use generateRandomness function from ./utils/crypto to generate CSRF token
Use the HMAC function from .utils/crypto to sign the CSRF token and check to prevent 
tampering.
    - this is necessary since hidden form field is modifiable w/ developer tools



## Charlie: Session Hijacking with Cookies
Upon login, we set two cookies:
    - the signed hash of the account's username, bitbars, and hashed password
    - the timestamp of when the cookie was set

At the start of every endpoint, we then invoke a function (checkValidCookie()),
which checks if the username, bitbars, and password that the current user serves
have not been tinkered with. If any one of them has been tinkered with,
it logs the user out.

This requires that the cookie hash be recomputed and resigned every
time it is changed and the user logs in so that it stays up to date. 
The only place where this turns out to be necessary is after a new
user registers.

This defense is stateless, meaning it doesn't require the server to maintain any
state. This makes it easily scaleable.




## Delta: Cooking the Books with Cookies
- sign and check the session obj?

OH
- store HMAC of cookie and then check hash of cookie



ECHO: TESTED & WORKS for Echo exploit. But not for other SQL vulns...

TODO:
- parameterize the other SQL queries, too
    - doesn't work everywhere...even when putting brackets around 2nd argument to db.run()


## Echo: SQL Injection
By parameterizing the SQL command to our SQLite database,
we prevent the attacker from picking a username that 
allows him to manipulate our SQL query.



TODO:
- test if attack works w/o csp (right now some csp seems to be accidentally set preventing the attack?!)
- test if attack no longer works w/ csp
    - csp code is written, just need to uncomment in router.js and profile/view.ejs

## Foxtrot: Profile Worm




TESTED & WORKS.
## Gamma: Password Extraction via Timing attacker
The defense for the Gamma attack consists of two parts:
1. remove the sleep() call when the password is correct
since it gives the attacker very explicit and recognizable
timing information when the correct password is entered.

2. add a sleep call() for a random duration no matter if the
password is correct or not. This serves to add noise and 
complicate attempts to use statistical methods to distinguish
the server response time given a correct password from the
server response time given an incorrect password