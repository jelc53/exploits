# Description of (resources used for) defenses

HIGH-LEVEL TODO
- Bravo
- Charlie
- Delta (similar to Charlie)
- Echo (only have to apply elsewhere) <- unclear if we'll be graded on fixing the other ones (but TA recommends we fix others too)
- Foxtrot


TESTED & WORKS.
## Alpha: Cookie Theft
The defense against Alpha is to only permit alphanumeric
usernames. That way, none of the characters that JS relies on
(<, ., ', ? etc.) can be included in the username. 

When the user tries to view a profile with an invalid username,
the user is notified that the username is invalid, and redirected
to view its own profile (by default). 

The project instructions instructed us not to oversanitize profile 
inputs, but being restrictive with usernames was said to be fine in OH. 



## Bravo: Cross-Site Request Forgery
Embed CSRF token in hidden form field in the form in transfer/form.ejs

Use generateRandomness function from ./utils/crypto to generate CSRF token
Use the HMAC function from .utils/crypto to sign the CSRF token and check to prevent 
tampering.
    - this is necessary since hidden form field is modifiable w/ developer tools

TODO
- figure out where to modify the input fields

- add expiry date upon serving form (10 hours)
- concat with the token and sign all of it
- then check validity of signature & expiry date in post_transfer endpoint

- in terms of location, /transfer seems the best spot cos close to /post_transfer but not the same (can't be the same)

- if they can live in process memory can they be global variables?




## Charlie: Session Hijacking with Cookies
- generate session token using KDF(currtime, randomnonce);

OH
- store HMAC of cookie
- fine to store the HMAC in the clear in the cookie.
- then verify when cookie is used for smth
- every time we change the cookie, compute a new HMAC and update the cookie

TODO
- check if current implementation for homepage is correct
- if so, copy to other endpoints & update session token HMAC when cookie is changed


## Delta: Cooking the Books with Cookies
- sign and check the session obj?

OH
- store HMAC of cookie and then check hash of cookie



ECHO: TESTED & WORKS for Echo exploit. But not for other SQL vulns...

TODO:
- parameterize the other SQL queries, too
    - doesn't work everywhere...
    - asked on Ed (post #342)

## Echo: SQL Injection
By parameterizing the SQL command to our SQLite database,
we prevent the attacker from picking a username that 
allows him to manipulate our SQL query.


## Foxtrot: Profile Worm

Added CSP of 'default-src self' to prevent <script> and <span> from loading.


TESTED & WORKS.
## Gamma: Password Extraction via Timing attacker
The defense for the Gamma attack consists of two parts:
1. remove the sleep() call when the password is correct
since it gives the attacker very explicit and recognizable
timing information when the correct password is entered.

2. add a sleep call() for a random duration no matter if the
password is correct or not. This serves to add noise and 
complicate attempts to use statistical methods to distinguish
the server response time given a correct password from the
server response time given an incorrect password

TODO
- is it indeed smart to add it in both correct and incorrect cases?
    - i feel like if we add noise only in one of the two we're giving
    the attacker more information?
