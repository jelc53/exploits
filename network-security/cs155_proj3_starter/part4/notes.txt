Scenaro: unsecured coffee shop wifi
Client, MITM, DNS Server, Bank HTTP connected to one switch 
One switch means all traffic routes all ethernet packets 

Client wants to send HTTP request to Bank server 
ARP > DNS > ARP > TCP > HTTP
0. When client connects to network, DHCP assigns client ip and provides local DNS server ip
1. First, need to make ARP request to get DNS server MAC address
2. Second make DNS server request to find ip associated with Bank.com
3. Send HTTP login request to bank.com
4. Receive response back

If attacker responds first to ARP, then client accepts this!
This is becuase ARP has no authentication
So client has fake MAC address

When cleint then asks for bank.com ip, it will send to attacker provided MAC
Attacker then gets to respond to DNS request with attcker ip (rather than bank.com ip)
In this project attacker uses same MAC for two ip addresses

Client makes login request to fakebank.com
Attacker receives and forwards traffic to bank.com
Receives response and forward back to client, now monster-in-the-middle

ARP spoofing: check out syntax from DNS intercept
    source = MITM MAC
    sourceProt = MITM IP
    dst = client MAC
    dstProt = cleint IP
    ethernet dst = client MAC

DNS spoofing: same
Network/dns/dns_server.go # comment line 


open pcap files and filter by "ip || arp" on wireshark
right click on pakcet and "follow http stream" or "follow tcp stream"


HTTPS defends against all of these!! Encrypted traffic.
Also attacker would not be able to present bank.com certfiicate

Note: on home network, switch and dns server are in the same box